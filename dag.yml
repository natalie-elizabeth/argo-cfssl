apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata: { generateName: build-deploy- }
spec:
  entrypoint: build-deploy
  arguments:
    parameters:
    - { name: should-print, value: "true" }
    - { name: repo, value: "git@github.com:natalie-elizabeth/argo-cfssl.git" }
    # - { name: url, value: "https://thrive.jfrog.io/artifactory/argo-artifacts/"}
    
  volumes:
  - name: ssl-secret-volume
    secret: 
      secretName: nginxsecret
  - name: csr-config
    configMap:
      name: csr-config

  templates:
    - name: build-deploy
      dag:
        tasks:

          - name: checkout
            template: checkout
          - name: certificate-validity-check
            dependencies: [checkout]
            template: certificate-validity-check
            
          - name: svc-bit
            template: svc-bit

          - name: csr-provisioning
            dependencies: [certificate-validity-check]
            template: csr-provisioning
            arguments:
              artifacts: 
              - { name: source, from: "{{tasks.checkout.outputs.artifacts.source}}" }                
          
          - name: certificate-provisioning
            dependencies: [csr-provisioning]
            template: certificate-provisioning
            arguments:
              artifacts:
              - { name: src, from: "{{tasks.csr-provisioning.outputs.artifacts.src}}" }
          # # when: "{{steps.certificate-validity-check.outputs.result}} == Invalid"   
          # - - name: deployment-bit
          #     template: deployment-bit
        

    - name: checkout
      container:
        image: alpine:3.12
        command: 
      inputs:
        artifacts:
        - name: source
          path: /src
          git:
            repo: "{{workflow.parameters.repo}}"
            sshPrivateKeySecret: { name: github-creds, key: id_rsa}
      outputs:
        artifacts:
        - name: source
          path: /src
          artifactory:
            url: "https://thrive.jfrog.io/artifactory/argo-artifacts/src.gz"
            usernameSecret:
              name: artifactory-creds
              key: name
            passwordSecret:
              name: artifactory-creds
              key: pass

    - name: certificate-validity-check
      script:
        image: nnanalarhy/kubessl
        command: [sh]
        source: |
          CERT_RES=$(kubectl get secret/nginxsecret -n argo -o name)
          VALIDITY_RES=$(openssl x509 -in /usr/local/share/ca-certificates/tls.crt -checkend 604800)
          if [ "${CERT_RES}"  == "secret/nginxsecret" ] && [ "${VALIDITY_RES}" == "Certificate will not expire" ]; then
            result="Valid"
            echo $result
          else
            result="Invalid"
            echo $result
          fi

    - name: svc-bit
      resource: 
        action: create
        manifest: |
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx
            labels:
              run: nginx
          spec:
            type: NodePort
            ports:
            - port: 80
              protocol: TCP
              name: http
            - port: 443
              protocol: TCP
              name: https
            selector:
              run: nginx

    - name: csr-provisioning
      inputs:
        artifacts:
          - { name: source, path: /src}
      container:
        image: nnanalarhy/cfssl
        command: [sh, -c, 'make csr']
        workingDir: /src
        
      outputs:
        artifacts:
        - name: src
          path: /src
          artifactory:
            url: "https://thrive.jfrog.io/artifactory/argo-artifacts/csr.gz"
            usernameSecret:
              name: artifactory-creds
              key: name
            passwordSecret:
              name: artifactory-creds
              key: pass

    - name: certificate-provisioning
      inputs:
        artifacts:
          - { name: src, path: /src}
          
      container:
        image: nnanalarhy/cfssl
        command: [sh, -c, 'make csr-approve']
        workingDir: /src
        
      
    - name: deployment-bit
      resource:
        action: create
        manifest: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx
          spec:
            selector:
              matchLabels:
                run: nginx
            replicas: 1
            template:
              metadata:
                labels:
                  run: nginx
              spec:
                volumes:
                - name: secret-volume
                  secret:
                    secretName: nginxsecret
                - name: configmap-volume
                  configMap:
                    name: nginxconfigmap
                containers:
                - name: nginxhttps
                  image: nginx
                  ports:
                  - containerPort: 443
                  - containerPort: 80
                  volumeMounts:
                  - mountPath: /etc/nginx/ssl
                    name: secret-volume
                  - mountPath: /etc/nginx/conf.d
                    name: configmap-volume